{"version":3,"sources":["../node_modules/jsdom/lib/jsdom sync","../node_modules/parse5/lib sync","Components/Editor.js","Components/Preview.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Editor","props","style","textAlign","rows","cols","onChange","handleChange","defaultValue","markdown","window","JSDOM","DOMPurify","createDOMPurify","Preview","dangerouslySetInnerHTML","__html","sanitize","text","marked","setOptions","breaks","App","state","bind","event","this","setState","target","value","className","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mXAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,kBCRzB,SAAST,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,8ICQVC,G,OAdA,SAAAC,GACb,OACE,yBAAKC,MAAO,CAAEC,UAAW,WACvB,8BACEJ,GAAG,SACHK,KAAK,KACLC,KAAK,KACLC,SAAUL,EAAMM,aAChBC,aAAcP,EAAMQ,c,kBCLtBC,EAAS,I,OAAIC,OAAM,IAAID,OACvBE,EAAYC,IAAgBH,GAanBI,EAXC,SAAAb,GACd,OACE,yBAAKF,GAAG,qBACN,uBACEA,GAAG,UACHgB,wBAAyB,CAAEC,OAAQJ,EAAUK,SAAShB,EAAMiB,W,kBCLpEC,IAAOC,WAAW,CAChBC,QAAQ,I,IAGJC,E,YACJ,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KACDsB,MAAQ,CACXL,KAAMC,IAAOV,IAEf,EAAKF,aAAe,EAAKA,aAAaiB,KAAlB,gBALH,E,0EAONC,GACXC,KAAKC,SAAS,CACZT,KAAMC,IAAOM,EAAMG,OAAOC,W,+BAI5B,OACE,6BACE,kBAAC,EAAD,CACEX,KAAMQ,KAAKH,MAAML,KACjBX,aAAcmB,KAAKnB,aACnBE,SAAUA,IAEZ,kBAAC,EAAD,CAASS,KAAMQ,KAAKH,MAAML,OAC1B,wBAAIhB,MAAO,CAAEC,UAAW,WACtB,uBAAG2B,UAAU,eADf,SACsC,uBAAGA,UAAU,gBADnD,0B,GAtBUC,IAAMC,WA+BlBvB,EAAQ,2oCAgDCa,IC/EKW,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.03b108aa.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 721;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 753;","import React from \"react\";\r\n\r\nconst Editor = props => {\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <textarea\r\n        id=\"editor\"\r\n        rows=\"15\"\r\n        cols=\"60\"\r\n        onChange={props.handleChange}\r\n        defaultValue={props.markdown}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\n\r\nimport createDOMPurify from \"dompurify\";\r\nimport { JSDOM } from \"jsdom\";\r\n\r\nconst window = new JSDOM(\"\").window;\r\nconst DOMPurify = createDOMPurify(window);\r\n\r\nconst Preview = props => {\r\n  return (\r\n    <div id=\"preview-container\">\r\n      <p\r\n        id=\"preview\"\r\n        dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(props.text) }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","import React from \"react\";\nimport \"./App.scss\";\n\nimport Editor from \"./Components/Editor\";\nimport Preview from \"./Components/Preview\";\n\nimport marked from \"marked\";\n\nmarked.setOptions({\n  breaks: true\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: marked(markdown)\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      text: marked(event.target.value)\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Editor\n          text={this.state.text}\n          handleChange={this.handleChange}\n          markdown={markdown}\n        />\n        <Preview text={this.state.text} />\n        <h4 style={{ textAlign: \"center\" }}>\n          <i className=\"fa fa-code\"></i> with <i className=\"fa fa-heart\"></i> by\n          Daniel Mimoun\n        </h4>\n      </div>\n    );\n  }\n}\n\nconst markdown = `# This is my Markdown Preview!\n\n## The preview is LIVE!!\n### Go ahead! Try it now!\n  \nIn here you can make your text **bold!**\nOr _italic_.\nOr both if you **_want!_**\nYou can even ~~cross your text out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nSingle-line code block, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code using 3 backticks on each side:\n\nconst Example = () => {\n  return (\n    <div>\n      <h1>Hello Markdown Preview!</h1>\n    </div>\n  );\n}\n\\`\\`\\`\n\nIf you really want to go all out there's even tables!:\n\nTitle 1 | Title 2 | Title 3\n------- | ------- | ------- \nUse the vertical Bar | for each td | and th.\nThe preview will make | all of this look good | so don't worry.\n\n- And of course there are lists.\n  - You can have them bulleted.\n     - With different indentation levels.\n        - And they look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. And the list will go on...\n-  You can use dashes or asterisks also.\n* And finally, let's show an embedded image:\n\n![Thumbs up logo w/o Text](https://bit.ly/2PKltys)\n`;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}